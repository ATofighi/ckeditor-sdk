Ext.data.JsonP.CKEDITOR_pluginDefinition({"tagname":"class","name":"CKEDITOR.pluginDefinition","autodetected":{},"files":[{"filename":"plugindefinition.js","href":"plugindefinition.html#CKEDITOR-pluginDefinition"}],"abstract":true,"members":[{"name":"hidpi","tagname":"property","owner":"CKEDITOR.pluginDefinition","id":"property-hidpi","meta":{}},{"name":"lang","tagname":"property","owner":"CKEDITOR.pluginDefinition","id":"property-lang","meta":{}},{"name":"requires","tagname":"property","owner":"CKEDITOR.pluginDefinition","id":"property-requires","meta":{}},{"name":"beforeInit","tagname":"method","owner":"CKEDITOR.pluginDefinition","id":"method-beforeInit","meta":{}},{"name":"init","tagname":"method","owner":"CKEDITOR.pluginDefinition","id":"method-init","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-CKEDITOR.pluginDefinition","short_doc":"Virtual class which just illustrates the features of plugin objects to be\npassed to the CKEDITOR.plugins.add method. ...","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/plugindefinition.html#CKEDITOR-pluginDefinition' target='_blank'>plugindefinition.js</a></div></pre><div class='doc-contents'><p>Virtual class which just illustrates the features of plugin objects to be\npassed to the <a href=\"#!/api/CKEDITOR.plugins-method-add\" rel=\"CKEDITOR.plugins-method-add\" class=\"docClass\">CKEDITOR.plugins.add</a> method.</p>\n\n<p>This class is not really part of the API, so its constructor should not be called.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-hidpi' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CKEDITOR.pluginDefinition'>CKEDITOR.pluginDefinition</span><br/><a href='source/plugindefinition.html#CKEDITOR-pluginDefinition-property-hidpi' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CKEDITOR.pluginDefinition-property-hidpi' class='name expandable'>hidpi</a> : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Announces the plugin as HiDPI-ready (optimized for high pixel density screens, e.g. ...</div><div class='long'><p>Announces the plugin as HiDPI-ready (optimized for high pixel density screens, e.g. <em>Retina</em>)\nby providing high-resolution icons and images. HiDPI icons must be twice as big\n(defaults are <code>16px x 16px</code>) and stored under <code>plugin_name/icons/hidpi/</code> directory.</p>\n\n<p>The common place for additional HiDPI images used by the plugin (<strong>but not icons</strong>)\nis <code>plugin_name/images/hidpi/</code> directory.</p>\n\n<p>This property is optional and only makes sense if <code>32px x 32px</code> icons\nand high-resolution images actually exist. If this flag is set <code>true</code>, the editor\nwill automatically detect the HiDPI environment and attempt to load the\nhigh-resolution resources.</p>\n        <p>Available since: <b>4.2</b></p>\n</div></div></div><div id='property-lang' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CKEDITOR.pluginDefinition'>CKEDITOR.pluginDefinition</span><br/><a href='source/plugindefinition.html#CKEDITOR-pluginDefinition-property-lang' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CKEDITOR.pluginDefinition-property-lang' class='name expandable'>lang</a> : Array<span class=\"signature\"></span></div><div class='description'><div class='short'>A list of language files available for this plugin. ...</div><div class='long'><p>A list of language files available for this plugin. These files are stored inside\nthe <code>lang</code> directory inside the plugin directory, follow the name\npattern of <code>langCode.js</code>, and contain the language definition created with\n<a href=\"#!/api/CKEDITOR.plugins-method-setLang\" rel=\"CKEDITOR.plugins-method-setLang\" class=\"docClass\">CKEDITOR.plugins.setLang</a>.</p>\n\n<p>When the plugin is being loaded, the editor checks this list to see if\na language file of the current editor language (<a href=\"#!/api/CKEDITOR.editor-property-langCode\" rel=\"CKEDITOR.editor-property-langCode\" class=\"docClass\">CKEDITOR.editor.langCode</a>)\nis available, and if so, loads it. Otherwise, the file represented by the first item\nin the list is loaded.</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR.plugins-method-add\" rel=\"CKEDITOR.plugins-method-add\" class=\"docClass\">CKEDITOR.plugins.add</a>( 'sample', {\n    lang: [ 'en', 'fr' ]\n} );\n</code></pre>\n</div></div></div><div id='property-requires' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CKEDITOR.pluginDefinition'>CKEDITOR.pluginDefinition</span><br/><a href='source/plugindefinition.html#CKEDITOR-pluginDefinition-property-requires' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CKEDITOR.pluginDefinition-property-requires' class='name expandable'>requires</a> : Array<span class=\"signature\"></span></div><div class='description'><div class='short'>A list of plugins that are required by this plugin. ...</div><div class='long'><p>A list of plugins that are required by this plugin. Note that this property\ndoes not determine the loading order of the plugins.</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR.plugins-method-add\" rel=\"CKEDITOR.plugins-method-add\" class=\"docClass\">CKEDITOR.plugins.add</a>( 'sample', {\n    requires: [ 'button', 'selection' ]\n} );\n</code></pre>\n</div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-beforeInit' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CKEDITOR.pluginDefinition'>CKEDITOR.pluginDefinition</span><br/><a href='source/plugindefinition.html#CKEDITOR-pluginDefinition-method-beforeInit' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CKEDITOR.pluginDefinition-method-beforeInit' class='name expandable'>beforeInit</a>( <span class='pre'>editor</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>A function called on initialization of every editor instance created in the\npage before the init call task. ...</div><div class='long'><p>A function called on initialization of every editor instance created in the\npage before the <a href=\"#!/api/CKEDITOR.pluginDefinition-method-init\" rel=\"CKEDITOR.pluginDefinition-method-init\" class=\"docClass\">init</a> call task. The <code>beforeInit</code> function will be called for\nall plugins, after that the <code>init</code> function is called for all of them. This\nfeature makes it possible to initialize things that could be used in the\n<code>init</code> function of other plugins.</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR.plugins-method-add\" rel=\"CKEDITOR.plugins-method-add\" class=\"docClass\">CKEDITOR.plugins.add</a>( 'sample', {\n    beforeInit: function( editor ) {\n        alert( 'Editor \"' + editor.name + '\" is to be initialized!' );\n    }\n} );\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>editor</span> : <a href=\"#!/api/CKEDITOR.editor\" rel=\"CKEDITOR.editor\" class=\"docClass\">CKEDITOR.editor</a><div class='sub-desc'><p>The editor instance being initialized.</p>\n</div></li></ul></div></div></div><div id='method-init' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CKEDITOR.pluginDefinition'>CKEDITOR.pluginDefinition</span><br/><a href='source/plugindefinition.html#CKEDITOR-pluginDefinition-method-init' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CKEDITOR.pluginDefinition-method-init' class='name expandable'>init</a>( <span class='pre'>editor</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Function called on initialization of every editor instance created in the page. ...</div><div class='long'><p>Function called on initialization of every editor instance created in the page.</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR.plugins-method-add\" rel=\"CKEDITOR.plugins-method-add\" class=\"docClass\">CKEDITOR.plugins.add</a>( 'sample', {\n    init: function( editor ) {\n        alert( 'Editor \"' + editor.name + '\" is being initialized!' );\n    }\n} );\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>editor</span> : <a href=\"#!/api/CKEDITOR.editor\" rel=\"CKEDITOR.editor\" class=\"docClass\">CKEDITOR.editor</a><div class='sub-desc'><p>The editor instance being initialized.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{"abstract":true}});