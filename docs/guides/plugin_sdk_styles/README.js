Ext.data.JsonP.plugin_sdk_styles({"guide":"<h1 id='plugin_sdk_styles-section-plugin-css-styles'>Plugin CSS Styles</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/plugin_sdk_styles-section-classic-editor'>Classic Editor</a></li>\n<li><a href='#!/guide/plugin_sdk_styles-section-inline-editor'>Inline Editor</a></li>\n<li><a href='#!/guide/plugin_sdk_styles-section-resulting-html-pages'>Resulting HTML Pages</a></li>\n<li><a href='#!/guide/plugin_sdk_styles-section-note-for-plugin-authors'>Note for Plugin Authors</a></li>\n</ol>\n</div>\n\n<p>Each plugin can introduce new CSS styles that need to be handled by the editor.</p>\n\n<p>The recommeded way to add them is to create a <code>styles</code> directory inside the plugin folder and place your stylesheet files there.</p>\n\n<p>Please note, however, that depending on the usage mode, adding custom styles requires some additional handling by the developer who integrates CKEditor with his or her page.</p>\n\n<h2 id='plugin_sdk_styles-section-classic-editor'>Classic Editor</h2>\n\n<p>In this case it is enough to define the stylesheet path in the plugin file. The plugin will then add this path to the <a href=\"#!/api/CKEDITOR.config-cfg-contentsCss\">config.contentsCss</a> setting and the styles will be loaded automatically by the <a href=\"#!/guide/dev_framed\">classic editor</a>.</p>\n\n<p>This is usually done by the plugin author by using the <a href=\"#!/api/CKEDITOR.editor-method-addContentsCss\">editor.addContentsCss()</a> method introduced in CKEditor 4.4.</p>\n\n<h2 id='plugin_sdk_styles-section-inline-editor'>Inline Editor</h2>\n\n<p>The <a href=\"#!/guide/dev_inline\">inline editor</a> cannot automatically load the stylesheet since it is not responsibe for the page styling, it just inherits and displays the styles defined for the page by its developer.</p>\n\n<p>In this case the developer integrating CKEditor needs to load the plugin stylesheet by adding it to the <code>&lt;head&gt;</code> section of the page that includes the editor.</p>\n\n<h2 id='plugin_sdk_styles-section-resulting-html-pages'>Resulting HTML Pages</h2>\n\n<p>The same is true for the final page where the content created by CKEditor is loaded and displayed to the end user &mdash; the additional plugin stylesheet needs to be added to the <code>&lt;head&gt;</code> section of the page.</p>\n\n<h2 id='plugin_sdk_styles-section-note-for-plugin-authors'>Note for Plugin Authors</h2>\n\n<p>If you are <a href=\"http://ckeditor.com/addons/plugins/all\">sharing a plugin</a> that needs to use additional styles:</p>\n\n<ol>\n<li>Place the styles in an easily recognizable directory inside the plugin directory (for example, the <code>styles</code> directory).</li>\n<li>Add the path to the plugin stylesheet to the <a href=\"#!/api/CKEDITOR.config-cfg-contentsCss\">config.contentsCss</a> setting in your plugin code.</li>\n<li>Create clear documentation for developers who include your plugin in their builds, urging them to add the plugin stylesheet to the <code>&lt;head&gt;</code> section of end-user HTML pages and the pages where inline editor is used.</li>\n</ol>\n\n","title":"Plugin CSS Styles","meta_description":"How to add plugin styles and integrate them with CKEditor.","meta_keywords":"ckeditor, editor, wysiwyg, plugin, plugins, sdk, style, styles, CSS, stylesheet, stylesheets"});