Ext.data.JsonP.dev_output_format({"guide":"<h1 id='dev_output_format-section-output-formatting'>Output Formatting</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/dev_output_format-section-the-html-writer'>The HTML Writer</a></li>\n<li><a href='#!/guide/dev_output_format-section-setting-writer-rules'>Setting Writer Rules</a></li>\n</ol>\n</div>\n\n<p>CKEditor offers a powerful and flexible output formatting system. It\ngives developers full control over what the HTML code produced by the\neditor will look like. The system makes it possible to control all HTML\ntags and can give a different result for each one of them.</p>\n\n<h2 id='dev_output_format-section-the-html-writer'>The HTML Writer</h2>\n\n<p>The <a href=\"http://ckeditor.com/addon/htmlwriter\">HTML Writer plugin</a> makes it possible to generate advanced formatted output with CKEditor.</p>\n\n<p>The \"writer\" is used by the <a href=\"#!/api/CKEDITOR.htmlDataProcessor\" rel=\"CKEDITOR.htmlDataProcessor\" class=\"docClass\">CKEDITOR.htmlDataProcessor</a> class to write the output data.\nTherefore, the current writer for a specific editor instance\ncan be retrieved with the <a href=\"#!/api/CKEDITOR.htmlDataProcessor-property-writer\" rel=\"CKEDITOR.htmlDataProcessor-property-writer\" class=\"docClass\">editor.dataProcessor.writer</a> property.</p>\n\n<p>It is possible to configure several output formatting options by setting\nthe writer properties. The following example summarizes the most used of\nthem, giving their default values:</p>\n\n<pre><code>var writer = editor.dataProcessor.writer;\n\n// The character sequence to use for every indentation step.\nwriter.indentationChars = '\\t';\n\n// The way to close self closing tags, like &lt;br /&gt;.\nwriter.selfClosingEnd = ' /&gt;';\n\n// The character sequence to be used for line breaks.\nwriter.lineBreakChars = '\\n';\n\n// The writing rules for the &lt;p&gt; tag.\nwriter.setRules( 'p', {\n    // Indicates that this tag causes indentation on line breaks inside of it.\n    indent: true,\n\n    // Inserts a line break before the &lt;p&gt; opening tag.\n    breakBeforeOpen: true,\n\n    // Inserts a line break after the &lt;p&gt; opening tag.\n    breakAfterOpen: true,\n\n    // Inserts a line break before the &lt;/p&gt; closing tag.\n    breakBeforeClose: false,\n\n    // Inserts a line break after the &lt;/p&gt; closing tag.\n    breakAfterClose: true\n});\n</code></pre>\n\n<h2 id='dev_output_format-section-setting-writer-rules'>Setting Writer Rules</h2>\n\n<p>Because the writer is a property of each editor instance, and also due\nto its dependency on the writer plugin to be loaded, the best way to\nmodify it is by listening to the <a href=\"#!/api/CKEDITOR-event-instanceReady\" rel=\"CKEDITOR-event-instanceReady\" class=\"docClass\">CKEDITOR.instanceReady</a>\nevent, so it is safe to assume that the <a href=\"#!/api/CKEDITOR.editor-property-dataProcessor\" rel=\"CKEDITOR.editor-property-dataProcessor\" class=\"docClass\">CKEDITOR.editor.dataProcessor</a> property will be\nloaded and ready for changes. The following code shows an example of\nthis approach used when creating an editor instance:</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR-method-replace\" rel=\"CKEDITOR-method-replace\" class=\"docClass\">CKEDITOR.replace</a>( 'editor1', {\n    on: {\n        instanceReady: function( ev ) {\n            // Output paragraphs as &lt;p&gt;Text&lt;/p&gt;.\n            this.dataProcessor.writer.setRules( 'p', {\n                indent: false,\n                breakBeforeOpen: true,\n                breakAfterOpen: false,\n                breakBeforeClose: false,\n                breakAfterClose: true\n            });\n        }\n    }\n});\n</code></pre>\n\n<p>Another method is to use the <a href=\"#!/api/CKEDITOR\" rel=\"CKEDITOR\" class=\"docClass\">CKEDITOR</a> object, so all editor instances will be changed:</p>\n\n<pre><code>CKEDITOR.on( 'instanceReady', function( ev ) {\n    // Ends self closing tags the HTML4 way, like &lt;br&gt;.\n    ev.editor.dataProcessor.writer.selfClosingEnd = '&gt;';\n});\n</code></pre>\n","title":"Output Formatting","meta_description":"How to configure CKEditor output formatting.","meta_keywords":"ckeditor, editor, wysiwyg, output, formatting, format, source, code, html, xhtml, data, writer, processor, indent, indentation, configuration, configure, modify, modification, change, customize, customization, customise, customisation"});