Ext.data.JsonP.dev_styles({"guide":"<h1 id='dev_styles-section-styles'>Styles</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/dev_styles-section-defining-styles'>Defining Styles</a></li>\n<li><a href='#!/guide/dev_styles-section-style-rules'>Style Rules</a></li>\n<li><a href='#!/guide/dev_styles-section-style-types'>Style Types</a></li>\n<li><a href='#!/guide/dev_styles-section-stylesheet-parser-plugin'>Stylesheet Parser Plugin</a></li>\n</ol>\n</div>\n\n<p>The <a href=\"http://ckeditor.com/addon/stylescombo\">Styles Combo</a> plugin adds the\na combo to the CKEditor toolbar, containing a list of styles. This list makes it easy to apply customized styles and semantic values to content created in the editor.</p>\n\n<p>The entries available in the combo drop-down list can be easily\ncustomized to suit your needs.</p>\n\n<h2 id='dev_styles-section-defining-styles'>Defining Styles</h2>\n\n<p>The styles definition is a JavaScript array which is registered by\ncalling the <a href=\"#!/api/CKEDITOR.stylesSet-method-add\" rel=\"CKEDITOR.stylesSet-method-add\" class=\"docClass\">CKEDITOR.stylesSet.add</a> function.\nA unique name must be assigned to your style definition, so you can later configure each\neditor instance to load it. This method lets you have a single style\ndefinition which is shared by several CKEditor instances present on the\npage.</p>\n\n<p>The following code shows how to register a sample style definition.</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR.stylesSet-method-add\" rel=\"CKEDITOR.stylesSet-method-add\" class=\"docClass\">CKEDITOR.stylesSet.add</a>( 'my_styles', [\n    // Block-level styles\n    { name: 'Blue Title', element: 'h2', styles: { 'color': 'Blue' } },\n    { name: 'Red Title' , element: 'h3', styles: { 'color': 'Red' } },\n\n    // Inline styles\n    { name: 'CSS Style', element: 'span', attributes: { 'class': 'my_style' } },\n    { name: 'Marker: Yellow', element: 'span', styles: { 'background-color': 'Yellow' } }\n]);\n</code></pre>\n\n<p>The definition registration like the one above can be placed inline in\nthe page source, or can live in an external file which is loaded \"on\ndemand\", when needed only (see below).</p>\n\n<p>When the definitions are ready, you must instruct the editor to apply\nthe newly registered styles by using the <a href=\"#!/api/CKEDITOR.config-cfg-stylesSet\" rel=\"CKEDITOR.config-cfg-stylesSet\" class=\"docClass\">stylesSet</a>\nsetting. This may be set in the <code>config.js</code> file, for example:</p>\n\n<pre><code>config.stylesSet = 'my_styles';\n</code></pre>\n\n<h3 id='dev_styles-section-using-an-external-styles-definition-file'>Using an External Styles Definition File</h3>\n\n<p>The style definition registration call can be included in an external\nJavaScript file. By default, CKEditor load the style definition from <code>styles.js</code> file included in its installation folder.</p>\n\n<p>Your style definition file can be saved in any place of your website (or\nsomewhere in the Internet). You must, however, know the URL required to\nreach it. For example, you can save the file at the root of your\nwebsite, and then call it as <code>/styles.js</code>, or place it anywhere else,\nand refer to it using its full URL, like\n<code>http://www.example.com/styles.js</code>.</p>\n\n<p>At that point, change the <code>stylesSet</code> setting to point the editor to\nyour file:</p>\n\n<pre><code>config.stylesSet = 'my_styles:/styles.js';\n\nOR\n\nconfig.stylesSet = 'my_styles:http://www.example.com/styles.js';\n</code></pre>\n\n<p>The syntax for the style definition setting is always:\n<code>style definition name : file URL</code>.</p>\n\n<p>Note that you must use the unique name you have used to register the\nstyle definition in the file.</p>\n\n<h2 id='dev_styles-section-style-rules'>Style Rules</h2>\n\n<p>The entries inside a style definition are called \"style rules\". Each\nrule defines the display name for a single style as well as the element,\nattributes, and CSS styles to be used for it. The following is the\ngeneric representation for it:</p>\n\n<pre><code>{\n    name: 'Name displayed in the Styles drop-down list',\n    element: 'HTML element name (for example \"span\")',\n    styles: {\n        'css-style1': 'desired value',\n        'css-style2': 'desired value',\n        ...\n    }\n    attributes: {\n        'attribute-name1': 'desired value',\n        'attribute-name2': 'desired value',\n        ...\n    }\n}\n</code></pre>\n\n<p>The <code>name</code> and <code>element</code> values are required, while other values are\noptional.</p>\n\n<h2 id='dev_styles-section-style-types'>Style Types</h2>\n\n<p>There are three kinds of style types, each one related to the element\nused in the style rule:</p>\n\n<ul>\n<li><strong>Block-level styles</strong> – applied to the text blocks (paragraphs) as\na whole, not limited to the text selections. These apply to the\nfollowing elements: <code>address</code>, <code>div</code>, <code>h1</code>, <code>h2</code>, <code>h3</code>, <code>h4</code>, <code>h5</code>,\n<code>h6</code>, <code>p</code>, and <code>pre</code>.</li>\n<li><strong>Object styles</strong> – applied to special selectable objects (not\ntextual), whenever such selection is supported by the browser. These\napply to the following elements: <code>a</code>, <code>embed</code>, <code>hr</code>, <code>img</code>, <code>li</code>,\n<code>object</code>, <code>ol</code>, <code>table</code>, <code>td</code>, <code>tr</code> and <code>ul</code>.</li>\n<li><strong>Inline styles</strong> – applied to text selections for style rules using\nelements not defined in other style types.</li>\n</ul>\n\n\n<h2 id='dev_styles-section-stylesheet-parser-plugin'>Stylesheet Parser Plugin</h2>\n\n<p>Another simplified method exists of customizing the\nstyles for the document created in CKEditor and populating the\ndrop-down list with style definitions added in an external\nCSS stylesheet file. The <a href=\"http://ckeditor.com/addon/stylesheetparser\">Stylesheet Parser</a> plugin lets you use your existing CSS styles without the\nneed to define the styles specifically for CKEditor in the format\npresented above.</p>\n\n<p>Having the Stylesheet Parser installed, you then need to supply the location of the CSS file that contains your\nstyle definitions by using the <a href=\"#!/api/CKEDITOR.config-cfg-contentsCss\" rel=\"CKEDITOR.config-cfg-contentsCss\" class=\"docClass\">contentsCss</a>\nconfiguration setting:</p>\n\n<pre><code>config.contentsCss = 'sample_CSS_file.css';\n</code></pre>\n\n<p>Finally, if you want to skip loading the styles that are used in\nCKEditor by default, you may set <code>stylesSet</code> to an empty value:</p>\n\n<pre><code>config.stylesSet = [];\n</code></pre>\n\n<p>This solution lets you configure the editor to use existing CSS\nstylesheet rules without the need to create separate style definitions\nfor CKEditor. On the other hand, the previously used approach offers\nmore control over which styles are available for the users, so both\nsolutions can be employed interchangeably, according to your needs.</p>\n\n<h3 id='dev_styles-section-choosing-the-css-selectors'>Choosing the CSS Selectors</h3>\n\n<p>The plugin can be fine-tuned to only take into\naccount the CSS selectors that match the <a href=\"#!/api/CKEDITOR.config-cfg-stylesheetParser_validSelectors\" rel=\"CKEDITOR.config-cfg-stylesheetParser_validSelectors\" class=\"docClass\">stylesheetParser_validSelectors</a>\nconfiguration value. The default regular expression accepts all CSS\nrules in a form of <code>element.class</code>, but you can modify it to\nrefer to a limited set of elements, like in the example below.</p>\n\n<pre><code>// Only add rules for &lt;p&gt; and &lt;span&gt; elements.\nconfig.stylesheetParser_validSelectors = /\\^(p|span)\\.\\w+/;\n</code></pre>\n\n<h3 id='dev_styles-section-limiting-the-css-selectors'>Limiting the CSS Selectors</h3>\n\n<p>You can also customize by setting the\n<a href=\"#!/api/CKEDITOR.config-cfg-stylesheetParser_skipSelectors\" rel=\"CKEDITOR.config-cfg-stylesheetParser_skipSelectors\" class=\"docClass\">stylesheetParser_skipSelectors</a>\nconfiguration value. The plugin will then ignore the CSS rules that\nmatch the regular expression and will not display them in the drop-down list\nnor use them to output the document content. The default\nvalue excludes all rules for the <code>&lt;body&gt;</code> element as well as classes\ndefined for no specific element, but you can modify it to ignore a wider\nset of elements, like in the example below.</p>\n\n<pre><code>// Ignore rules for &lt;body&gt; and &lt;caption&gt; elements, classes starting with \"high\", and any class defined for no specific element.\nconfig.stylesheetParser_skipSelectors = /(^body\\.|^caption\\.|\\.high|^\\.)/i;\n</code></pre>\n","title":"Styles","meta_description":null,"meta_keywords":null});